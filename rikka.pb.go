// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rikka.proto

package rikka

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This is a request for a question to be answered based off a passage
// currently passage max is 386 words and 50 for question
// This is subject to change and updated information can be found in Rikka github settings file
type QueryRequest struct {
	Passage              string   `protobuf:"bytes,1,opt,name=passage,proto3" json:"passage,omitempty"`
	Question             string   `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e37513e3e56fce4, []int{0}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetPassage() string {
	if m != nil {
		return m.Passage
	}
	return ""
}

func (m *QueryRequest) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

// This is the reply from a query request consisting of a answer and a score
// answer as no limitations on size except as big as inputed passage
// score is a float returned as a string for flexiblity
type AnswerReply struct {
	Answer               string   `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	Score                string   `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnswerReply) Reset()         { *m = AnswerReply{} }
func (m *AnswerReply) String() string { return proto.CompactTextString(m) }
func (*AnswerReply) ProtoMessage()    {}
func (*AnswerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e37513e3e56fce4, []int{1}
}

func (m *AnswerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnswerReply.Unmarshal(m, b)
}
func (m *AnswerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnswerReply.Marshal(b, m, deterministic)
}
func (m *AnswerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnswerReply.Merge(m, src)
}
func (m *AnswerReply) XXX_Size() int {
	return xxx_messageInfo_AnswerReply.Size(m)
}
func (m *AnswerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AnswerReply.DiscardUnknown(m)
}

var xxx_messageInfo_AnswerReply proto.InternalMessageInfo

func (m *AnswerReply) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func (m *AnswerReply) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

// The Summary request is made up of a passage
// Any size is fine
type SummaryRequest struct {
	Passage              string   `protobuf:"bytes,1,opt,name=passage,proto3" json:"passage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryRequest) Reset()         { *m = SummaryRequest{} }
func (m *SummaryRequest) String() string { return proto.CompactTextString(m) }
func (*SummaryRequest) ProtoMessage()    {}
func (*SummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e37513e3e56fce4, []int{2}
}

func (m *SummaryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryRequest.Unmarshal(m, b)
}
func (m *SummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryRequest.Marshal(b, m, deterministic)
}
func (m *SummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryRequest.Merge(m, src)
}
func (m *SummaryRequest) XXX_Size() int {
	return xxx_messageInfo_SummaryRequest.Size(m)
}
func (m *SummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryRequest proto.InternalMessageInfo

func (m *SummaryRequest) GetPassage() string {
	if m != nil {
		return m.Passage
	}
	return ""
}

// The Reply is a string of any size
// Just smaller than the orginal
type SummaryReply struct {
	Summary              string   `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryReply) Reset()         { *m = SummaryReply{} }
func (m *SummaryReply) String() string { return proto.CompactTextString(m) }
func (*SummaryReply) ProtoMessage()    {}
func (*SummaryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e37513e3e56fce4, []int{3}
}

func (m *SummaryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryReply.Unmarshal(m, b)
}
func (m *SummaryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryReply.Marshal(b, m, deterministic)
}
func (m *SummaryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryReply.Merge(m, src)
}
func (m *SummaryReply) XXX_Size() int {
	return xxx_messageInfo_SummaryReply.Size(m)
}
func (m *SummaryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryReply.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryReply proto.InternalMessageInfo

func (m *SummaryReply) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

// The question request is made up of a passage and term
// The question will invlove the term based off passage
// can be any size
type QuestionRequest struct {
	Passage              string   `protobuf:"bytes,1,opt,name=passage,proto3" json:"passage,omitempty"`
	Term                 string   `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuestionRequest) Reset()         { *m = QuestionRequest{} }
func (m *QuestionRequest) String() string { return proto.CompactTextString(m) }
func (*QuestionRequest) ProtoMessage()    {}
func (*QuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e37513e3e56fce4, []int{4}
}

func (m *QuestionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuestionRequest.Unmarshal(m, b)
}
func (m *QuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuestionRequest.Marshal(b, m, deterministic)
}
func (m *QuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionRequest.Merge(m, src)
}
func (m *QuestionRequest) XXX_Size() int {
	return xxx_messageInfo_QuestionRequest.Size(m)
}
func (m *QuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionRequest proto.InternalMessageInfo

func (m *QuestionRequest) GetPassage() string {
	if m != nil {
		return m.Passage
	}
	return ""
}

func (m *QuestionRequest) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

// The question returned is a string
// max is words
type QuestionReply struct {
	Question             string   `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuestionReply) Reset()         { *m = QuestionReply{} }
func (m *QuestionReply) String() string { return proto.CompactTextString(m) }
func (*QuestionReply) ProtoMessage()    {}
func (*QuestionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e37513e3e56fce4, []int{5}
}

func (m *QuestionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuestionReply.Unmarshal(m, b)
}
func (m *QuestionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuestionReply.Marshal(b, m, deterministic)
}
func (m *QuestionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionReply.Merge(m, src)
}
func (m *QuestionReply) XXX_Size() int {
	return xxx_messageInfo_QuestionReply.Size(m)
}
func (m *QuestionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionReply.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionReply proto.InternalMessageInfo

func (m *QuestionReply) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "QueryRequest")
	proto.RegisterType((*AnswerReply)(nil), "AnswerReply")
	proto.RegisterType((*SummaryRequest)(nil), "SummaryRequest")
	proto.RegisterType((*SummaryReply)(nil), "SummaryReply")
	proto.RegisterType((*QuestionRequest)(nil), "QuestionRequest")
	proto.RegisterType((*QuestionReply)(nil), "QuestionReply")
}

func init() { proto.RegisterFile("rikka.proto", fileDescriptor_7e37513e3e56fce4) }

var fileDescriptor_7e37513e3e56fce4 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x13, 0x31, 0xad, 0x3d, 0x4d, 0xda, 0x72, 0x11, 0x09, 0x59, 0xc9, 0x2c, 0xa4, 0x28,
	0xce, 0x42, 0xc1, 0x8d, 0x0b, 0x11, 0x04, 0xd7, 0x8d, 0x4f, 0x30, 0xca, 0x45, 0x42, 0xcd, 0x8f,
	0x33, 0x09, 0x52, 0x1f, 0xc4, 0xe7, 0x95, 0x4c, 0x26, 0x35, 0x71, 0xa3, 0xbb, 0x7c, 0xe4, 0xe6,
	0xde, 0x73, 0xbe, 0x60, 0xae, 0xb3, 0xed, 0x56, 0xc9, 0x4a, 0x97, 0x75, 0x29, 0x1e, 0x10, 0x6e,
	0x1a, 0xd6, 0xbb, 0x94, 0xdf, 0x1b, 0x36, 0x35, 0xc5, 0x98, 0x56, 0xca, 0x18, 0xf5, 0xca, 0xb1,
	0x7f, 0xea, 0xaf, 0x67, 0x69, 0x8f, 0x94, 0xe0, 0xc8, 0x8e, 0x64, 0x65, 0x11, 0x1f, 0xd8, 0x57,
	0x7b, 0x16, 0xb7, 0x98, 0xdf, 0x17, 0xe6, 0x83, 0x75, 0xca, 0xd5, 0xdb, 0x8e, 0x4e, 0x30, 0x51,
	0x16, 0xdd, 0x0e, 0x47, 0x74, 0x8c, 0xc0, 0xbc, 0x94, 0x9a, 0xdd, 0xf7, 0x1d, 0x88, 0x73, 0x2c,
	0x9e, 0x9a, 0x3c, 0x57, 0xff, 0x08, 0x21, 0xd6, 0x08, 0xf7, 0xb3, 0xed, 0xa5, 0x18, 0x53, 0xd3,
	0x71, 0x3f, 0xe9, 0x50, 0xdc, 0x61, 0xb9, 0x71, 0xf1, 0xfe, 0xee, 0x46, 0x38, 0xac, 0x59, 0xe7,
	0x2e, 0x97, 0x7d, 0x16, 0x17, 0x88, 0x7e, 0x16, 0xb4, 0xb7, 0x86, 0x02, 0xfc, 0xb1, 0x80, 0xab,
	0x2f, 0x1f, 0x41, 0xda, 0x6a, 0xa5, 0x33, 0x04, 0x56, 0x28, 0x45, 0x72, 0x28, 0x36, 0x09, 0xe5,
	0xc0, 0x90, 0xf0, 0xe8, 0x12, 0xb3, 0xae, 0x49, 0xf6, 0xc9, 0xb4, 0x94, 0x63, 0x03, 0x49, 0x24,
	0x87, 0x35, 0x85, 0x47, 0x37, 0x58, 0x3d, 0x72, 0xc1, 0x5a, 0xd5, 0xdc, 0xa7, 0xa2, 0x95, 0xfc,
	0xd5, 0x30, 0x59, 0xc8, 0x51, 0x64, 0xe1, 0x3d, 0x4f, 0xec, 0x6f, 0xbe, 0xfe, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x3d, 0x4f, 0xe5, 0xc2, 0xf5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RikkaClient is the client API for Rikka service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RikkaClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*AnswerReply, error)
	Summarize(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryReply, error)
	GenerateQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionReply, error)
}

type rikkaClient struct {
	cc *grpc.ClientConn
}

func NewRikkaClient(cc *grpc.ClientConn) RikkaClient {
	return &rikkaClient{cc}
}

func (c *rikkaClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*AnswerReply, error) {
	out := new(AnswerReply)
	err := c.cc.Invoke(ctx, "/Rikka/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rikkaClient) Summarize(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryReply, error) {
	out := new(SummaryReply)
	err := c.cc.Invoke(ctx, "/Rikka/Summarize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rikkaClient) GenerateQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*QuestionReply, error) {
	out := new(QuestionReply)
	err := c.cc.Invoke(ctx, "/Rikka/GenerateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RikkaServer is the server API for Rikka service.
type RikkaServer interface {
	Query(context.Context, *QueryRequest) (*AnswerReply, error)
	Summarize(context.Context, *SummaryRequest) (*SummaryReply, error)
	GenerateQuestion(context.Context, *QuestionRequest) (*QuestionReply, error)
}

func RegisterRikkaServer(s *grpc.Server, srv RikkaServer) {
	s.RegisterService(&_Rikka_serviceDesc, srv)
}

func _Rikka_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RikkaServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rikka/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RikkaServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rikka_Summarize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RikkaServer).Summarize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rikka/Summarize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RikkaServer).Summarize(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rikka_GenerateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RikkaServer).GenerateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rikka/GenerateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RikkaServer).GenerateQuestion(ctx, req.(*QuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rikka_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Rikka",
	HandlerType: (*RikkaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Rikka_Query_Handler,
		},
		{
			MethodName: "Summarize",
			Handler:    _Rikka_Summarize_Handler,
		},
		{
			MethodName: "GenerateQuestion",
			Handler:    _Rikka_GenerateQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rikka.proto",
}
